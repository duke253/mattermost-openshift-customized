yum install -y epel-release && yum -y update
yum install -y yum-utils device-mapper-persistent-data lvm2 git ansible wget bash-completion NetworkManager NetworkManager-tui iotop nc nmap net-tools rsync tcpdump telnet traceroute nmon htop firewalld bind-utils

#enable up-arrow browsing throw commands history
vi /etc/inputrc
->
===============================================
...
#Enable up-down-arrow browse from history
"\e[A": history-search-backward
"\e[B": history-search-forward
===============================================

logout

yum -y install nginx

cp /etc/nginx/nginx.conf /etc/nginx/nginx.conf.bak

vi /etc/nginx/nginx.conf
->
====================================================
worker_processes  auto;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
}


http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    #gzip  on;

    include /etc/nginx/conf.d/*.conf;
}
======================================================

vi /etc/nginx/conf.d/mm-front.conf
->
======================================================
upstream %you_internal_servername_for_mattermost-openshift_route% {
    server %you_internal_servername_for_mattermost-openshift_route%:443;
}

upstream %you_internal_servername_for_keycloak-openshift_route% {
    server %you_internal_servername_for_keycloak-openshift_route%:443;
}

server {
  listen 80 default_server;
  server_name %you_external_servername_for_mattermost%;
  return 301 https://%you_external_servername_for_mattermost%$request_uri;
}

server {
    listen      443 ssl http2;
    server_name %you_external_servername_for_mattermost%;

    ssl_certificate /etc/nginx/certs/certificate_chained.crt;
    ssl_certificate_key /etc/nginx/certs/private.key;

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_session_timeout 1d;
    ssl_early_data on;
    ssl_stapling on;
    ssl_stapling_verify on;

    ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256';
    ssl_prefer_server_ciphers on;
    ssl_session_cache shared:SSL:50m;
    add_header Strict-Transport-Security max-age=15768000;

    http2_push_preload on;

    add_header X-Early-Data $tls1_3_early_data;

    location ~ /auth/.* {
    proxy_pass                    https://%you_internal_servername_for_keycloak-openshift_route%;
    proxy_ssl_certificate         /etc/nginx/ssl/client.pem;
    proxy_ssl_certificate_key     /etc/nginx/ssl/client.key;
    proxy_ssl_protocols           TLSv1.2 TLSv1.3;
    proxy_ssl_ciphers             'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256';
    proxy_ssl_trusted_certificate /etc/nginx/ssl/trusted_ca_cert.crt;

#    proxy_ssl_verify        on;
#    proxy_ssl_verify_depth  2;
    proxy_ssl_session_reuse on;

    proxy_ssl_server_name on;

    proxy_set_header Connection "";
    proxy_set_header Host $http_host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Frame-Options SAMEORIGIN;
    }

    location ~ /api/v[0-9]+/(users/)?websocket$ {
    proxy_pass                    https://%you_internal_servername_for_mattermost-openshift_route%;
    proxy_ssl_certificate         /etc/nginx/ssl/client.pem;
    proxy_ssl_certificate_key     /etc/nginx/ssl/client.key;
    proxy_ssl_protocols           TLSv1.2 TLSv1.3;
    proxy_ssl_ciphers             'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256';
    proxy_ssl_trusted_certificate /etc/nginx/ssl/trusted_ca_cert.crt;

#    proxy_ssl_verify        on;
#    proxy_ssl_verify_depth  2;
    proxy_ssl_session_reuse on;

    proxy_ssl_server_name on;

    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
    proxy_set_header Host $http_host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Frame-Options SAMEORIGIN;
    }

    location / {
    proxy_pass                    https://%you_internal_servername_for_mattermost-openshift_route%;
    proxy_ssl_certificate         /etc/nginx/ssl/client.pem;
    proxy_ssl_certificate_key     /etc/nginx/ssl/client.key;
    proxy_ssl_protocols           TLSv1.2 TLSv1.3;
    proxy_ssl_ciphers             'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256';
    proxy_ssl_trusted_certificate /etc/nginx/ssl/trusted_ca_cert.crt;

#    proxy_ssl_verify        on;
#    proxy_ssl_verify_depth  2;
    proxy_ssl_session_reuse on;

    proxy_ssl_server_name on;

    proxy_set_header Connection "";
    proxy_set_header Host $http_host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Frame-Options SAMEORIGIN;
    }
}

map $ssl_early_data $tls1_3_early_data {
  "~." $ssl_early_data;
  default "";
}
================================================================

firewall-cmd --permanent --add-service=http
firewall-cmd --permanent --add-service=https

firewall-cmd --reload

systemctl start nginx
systemctl enable nginx
systemctl status nginx


