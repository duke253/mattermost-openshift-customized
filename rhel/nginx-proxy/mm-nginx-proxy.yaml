apiVersion: v1
kind: Template
metadata:
  name: nginx
  objects:
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: '${APPLICATION_NAME}'
      spec:
    selector:
      name: '${APPLICATION_NAME}'
    replicas: 1
    securityContext: {}
    template:
      metadata:
        labels:
          name: '${APPLICATION_NAME}'
      spec:
        containers:
        - image: quay.io/duke253/nginx-openshift-customized:1.1
          imagePullPolicy: Always
          name: '${APPLICATION_NAME}'
          ports:
        - containerPort: 8080
          protocol: TCP
        - containerPort: 8443
          protocol: TCP
        livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 8080
              scheme: HTTP
            periodSeconds: 60
            successThreshold: 1
            timeoutSeconds: 10
          ports:
          - containerPort: 8080
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 8065
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 60
            successThreshold: 1
            timeoutSeconds: 10
        resources:
          limits:
            cpu: '1'
            memory: 1Gi
          requests:
            cpu: 50m
            memory: 512Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
- kind: Service
  apiVersion: v1
  metadata:
    name: '${APPLICATION_NAME}'
  spec:
    ports:
    - name: 8080-tcp
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      deploymentconfig: '${APPLICATION_NAME}'
- kind: Service
  apiVersion: v1
  metadata:
    name: secure-'${APPLICATION_NAME}'
  spec:
    ports:
    - name: 8443-tcp
      port: 8443
      protocol: TCP
      targetPort: 8443
    selector:
      deploymentconfig: '${APPLICATION_NAME}'
- kind: Route
  apiVersion: v1
  metadata:
    name: '${APPLICATION_NAME}'-http
  spec:
    host: ${HOSTNAME_HTTP}
    to:
      kind: Service
      name: '${APPLICATION_NAME}'
    port:
      targetPort: 8080-tcp
- kind: Route
  apiVersion: v1
  metadata:
    name: '${APPLICATION_NAME}'-https
  spec:
    host: ${HOSTNAME_HTTPS}
    tls:
      termination: passthrough
    to:
      kind: Service
      name: secure-'${APPLICATION_NAME}'
    port:
      targetPort: 8443-tcp
parameters:
- name: APPLICATION_NAME
  required: true
  value: nginx